#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) 1  {
        // Fork failed
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        char *args[] = {"ls", "-l", NULL};

        if (execvp(args[0], args) == -1) {
            perror("execvp failed");
            exit(1);
        }
    } else {
        // Parent process
        int status;
        pid_t wpid = wait(&status);

        if (WIFEXITED(status)) {
            printf("Child process (PID: %d) terminated with exit status %d\n", wpid, WEXITSTATUS(status));
        } else {
            printf("Child process did not terminate normally\n");
        }
    }

    return 0;
}