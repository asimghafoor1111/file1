#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork(); // Create a child process

    if (pid < 0) {
        // Fork failed
        fprintf(stderr, "Fork Failed\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) is running\n", getpid());

        // Simulate some work in the child process
        sleep(2);

        printf("Child process terminating with exit status 0\n");
        exit(0); // Terminate child process with exit status 0
    } else {
        // Parent process
        int status;
        pid_t wpid = wait(&status);

        if (WIFEXITED(status)) {
            printf("Child process (PID: %d) terminated with exit status %d\n", wpid, WEXITSTATUS(status));
        } else {
            printf("Child process did not terminate normally\n");
        }
    }

    return 0;
}